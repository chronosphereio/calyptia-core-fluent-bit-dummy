name: CI

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build and test
    permissions:
      contents: write
      packages: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Install cmetrics library
        run: |
          curl -L https://github.com/calyptia/cmetrics/releases/download/${CMETRICS_RELEASE}/cmetrics_${CMETRICS_VERSION}_${ARCH}-headers.deb  --output cmetrics_${CMETRICS_VERSION}_${ARCH}-headers.deb
          curl -L https://github.com/calyptia/cmetrics/releases/download/${CMETRICS_RELEASE}/cmetrics_${CMETRICS_VERSION}_${ARCH}.deb --output cmetrics_${CMETRICS_VERSION}_${ARCH}.deb
          sudo dpkg -i *.deb
        env:
          CMETRICS_VERSION: "0.3.3"
          CMETRICS_RELEASE: "v0.3.3"
          ARCH: "amd64"

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Unit tests
        run: go test -v -covermode=atomic -coverprofile=coverage.out ./...
        shell: bash

      - name: Upload coverage to Codecov
        if: ${{ github.event_name != 'pull_request' }}
        uses: codecov/codecov-action@v3.1.1
        with:
          file: ./coverage.out
          flags: ${{ runner.os }}
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Install Syft for sboms
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        shell: bash

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.CALYPTIA_GPG_KEY }}
          passphrase: ${{ secrets.CALYPTIA_GPG_KEY_PASSPHRASE }}

      - name: Build artefacts on top of cross compile image.
        run: |
          make build
        shell: bash
        env:
          GORELEASER_IMAGE: ghcr.io/calyptia/lts-advanced-plugin-template/goreleaser-cross:latest
          GORELEASER_SNAPSHOT: ${{ github.event_name == 'pull_request' }}

      - name: Run GoReleaser on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          distribution: goreleaser-pro
          args: release --skip-publish --skip-sign --skip-sbom --skip-validate --rm-dist --snapshot
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_PRO_KEY }}

      - name: Run GoReleaser
        if: ${{ github.event_name != 'pull_request' }}
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          distribution: goreleaser-pro
          args: release --skip-validate --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_PRO_KEY }}
